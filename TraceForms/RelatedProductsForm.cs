using DevExpress.Data;
using DevExpress.Utils.Win;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.Popup;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.Grid;
using FlexModel;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace TraceForms
{

    public partial class RelatedProductsForm : DevExpress.XtraEditors.XtraForm
    {
        string _currentVal;
        bool _modified = false;
        bool _newRec = false;
        bool _ignoreLeaveRow = false, _ignorePositionChange = false;
        FlextourEntities _context;
        Timer _actionConfirmation;
        RelatedProduct _selectedRecord;
		RepositoryItemImageComboBox _productCombo = new RepositoryItemImageComboBox();
		Dictionary<String, List<CodeName>> _productLookups;
        FlexInterfaces.Core.ICoreSys _sys;

        public RelatedProductsForm(FlexInterfaces.Core.ICoreSys sys)
        {
            InitializeComponent();
            Connect(sys);
            LoadLookups();
            _sys = sys;
            //// This line of code is generated by Data Source Configuration Wizard
            //entityInstantFeedbackSource.GetQueryable += entityInstantFeedbackSource_GetQueryable;
            //// This line of code is generated by Data Source Configuration Wizard
            //entityInstantFeedbackSource.DismissQueryable += entityInstantFeedbackSource_DismissQueryable;
        }

        void LoadLookups()
		{
            bindingNavigator.BackColor = BackColor;     //match the DevExpress style
            setReadOnly(true);
			enableNavigator(false);

			CodeName loadBlank = new CodeName(string.Empty);

			_productLookups = new Dictionary<String, List<CodeName>>();

            List<CodeName> lookup;
            //EF will try to execute the entire projection on the sql side, which knows nothing about string.format so it will
            //error. Putting AsEnumerable beforehand will tell EF to execute sql side up to there and return results, then the
            //rest will be EF client side

            lookup = new List<CodeName>();
            lookup.AddRange(_context.HOTEL
                .OrderBy(t => t.CODE)
                .Select(t => new CodeName() { Code = t.CODE, Name = t.NAME }));
			_productLookups.Add("HTL", lookup);

            lookup = new List<CodeName>();
            lookup.AddRange(_context.WAYPOINT
                .OrderBy(t => t.CODE)
                .Select(t => new CodeName() { Code = t.CODE, Name = t.DESC }));
            _productLookups.Add("WAY", lookup);

            lookup = new List<CodeName>();
            lookup.AddRange(_context.COMP
                .OrderBy(t => t.CODE)
                .Select(t => new CodeName() { Code = t.CODE, Name = t.NAME }));
            _productLookups.Add("OPT", lookup);

            lookup = new List<CodeName>();
            lookup.AddRange(_context.PACK
                .OrderBy(t => t.CODE)
                .Select(t => new CodeName() { Code = t.CODE, Name = t.NAME }));
            _productLookups.Add("PKG", lookup);

            //Set up a merged grouping for the master type and code
            gridViewLookup.SortInfo.ClearAndAddRange(new[] {
                new GridMergedColumnSortInfo(new[] { colProduct_Type, colProduct_Code},
                new[] { ColumnSortOrder.Ascending, ColumnSortOrder.Descending,})}, 2);

            bindingSource.DataSource = _context.RelatedProduct;
        }

        void enableNavigator(bool value)
        {
			bindingNavigatorMoveNextItem.Enabled = value;
			bindingNavigatorMoveLastItem.Enabled = value;
			bindingNavigatorMoveFirstItem.Enabled = value;
			bindingNavigatorMovePreviousItem.Enabled = value;
			bindingNavigatorDeleteItem.Enabled = value;
			bindingNavigatorSaveItem.Enabled = value;
            buttonMoveUp.Enabled = value;
            buttonMoveDown.Enabled = value;
        }

        private void Connect(FlexInterfaces.Core.ICoreSys sys)
        {
            Connection.EFConnectionString = sys.Settings.EFConnectionString;
            _context = new FlextourEntities(sys.Settings.EFConnectionString);
        }

		void setReadOnly(bool value)
		{
			foreach (Control control in splitContainerControl.Panel2.Controls) {
				control.Enabled = !value;
			}
		}

		private bool SaveRecord(bool prompt)
		{
			try {
				if (_selectedRecord == null) return true;

                //Call to make sure the modified flag is set, because the Save button doesn't take focus so the Leave event
                //won't fire on the active control
                SetErrorInfo(null, ActiveControl);

                if (_modified || _newRec) {
                    if (prompt) {
                        DialogResult result = DisplayHelper.QuestionYesNoCancel(this, "Do you want to confirm these changes?");
                        if (result == DialogResult.No) {
                            if (_newRec) {
                                RemoveRecord();
                            }
                            else {
                                RefreshRecord();
                            }
                            _modified = false;
                            _newRec = false;
                            return true;
                        }
                        if (result == DialogResult.Cancel) {
                            return false;
                        }
                    }
                    FinalizeBindings();
                    ValidateAll();

                    if (_selectedRecord.ID == 0) {
                        _context.RelatedProduct.AddObject(_selectedRecord);
                    }
                    _context.SaveChanges();
                    ShowActionConfirmation("Record Saved");
                    _newRec = false;
                    _modified = false;
                }
                return true;
			}
			catch (Exception ex) {
				DisplayHelper.DisplayError(this, ex);
				RefreshRecord();		//pull it back from db because that is its current state
				//We must also Load and rebind the related entities from the db because context.Refresh doesn't do that
				SetBindings();
				return false;
			}
		}

		private void FinalizeBindings()
		{
			bindingSource.EndEdit();
		}

		private void ValidateAll()
		{
			if (!_selectedRecord.Validate()) {
				if (_selectedRecord.Errors.ContainsKey("ID")) {
					//Errors attached to the ID property are non-field specific, eg a duplicate record, so
					//just show an error message without setting an error icon on a field.
					throw new Exception(_selectedRecord.Errors["ID"]);
				}
				else {
					ValidateMainControls();
					throw new Exception("Errors were found. Please resolve them and try again.");
				}
			}
			else {
				errorProvider1.Clear();
			}
		}

		private void ValidateMainControls()
		{
			//Errors on the main form must be set manually
			SetErrorInfo(_selectedRecord.ValidateMasterType, comboBoxEditMasterType);
			SetErrorInfo(_selectedRecord.ValidateMasterCode, SearchLookupEditMaster);
			SetErrorInfo(_selectedRecord.ValidateMasterType, comboBoxEditMasterType);
			SetErrorInfo(_selectedRecord.ValidateMasterCode, SearchLookupEditMaster);
			//The reason for validating start and end dates with the same routine is just to get the error icon
			//on both fields
			SetErrorInfo(_selectedRecord.ValidateServiceDates, dateEditServiceStart);
			SetErrorInfo(_selectedRecord.ValidateServiceDates, dateEditServiceEnd);
			SetErrorInfo(_selectedRecord.ValidateBookingDates, dateEditBookingStart);
			SetErrorInfo(_selectedRecord.ValidateBookingDates, dateEditBookingEnd);
		}

		private void RefreshRecord()
		{
			if (_selectedRecord != null && _selectedRecord.ID != 0) {
				_context.Refresh(System.Data.Entity.Core.Objects.RefreshMode.StoreWins, _selectedRecord);
			}
		}

		private void RemoveRecord()
		{
			bindingSource.RemoveCurrent();
		}

		private void ShowActionConfirmation(string confirmation)
		{
			panelControlStatus.Visible = true;
			LabelStatus.Text = confirmation;
            _actionConfirmation = new Timer {
                Interval = 3000
            };
            _actionConfirmation.Start();
			_actionConfirmation.Tick += TimedEvent;
		}

        private void bindingNavigatorAddNewItem_Click(object sender, EventArgs e)
        {
            _ignoreLeaveRow = true;       //so that when the grid row changes it doesn't try to save again
            if (SaveRecord(true)) {
				gridViewLookup.ClearColumnsFilter();
				_newRec = true;
				bindingSource.AddNew();
				//if (GridViewRoute.FocusedRowHandle == GridControl.AutoFilterRowHandle)
				gridViewLookup.FocusedRowHandle = gridViewLookup.RowCount - 1;
				comboBoxEditMasterType.Focus();
				setReadOnly(false);
			}
            _ignoreLeaveRow = false;
        }

        private void DeleteRecord()
		{
			if (_selectedRecord == null) return;

			try {
				if (DisplayHelper.QuestionYesNo(this, "Are you sure you want to delete this record?") == DialogResult.Yes) {
					_ignoreLeaveRow = true;
					_ignorePositionChange = true;
					RemoveRecord();
					errorProvider1.Clear();
					if (!_newRec) {
						//Apparently a record which has just been added is not flagged for deletion by BindingSource.RemoveCurrent,
						//(the EntityState remains unchanged).  It seems like it is not tracked by the context even though it is, because
						//the EntityState changes for modification. So if this is a deletion and the entity is not flagged for deletion, 
						//delete it manually.
						if (_selectedRecord != null && (_selectedRecord.EntityState & EntityState.Deleted) != EntityState.Deleted)
							_context.RelatedProduct.DeleteObject(_selectedRecord);
						_context.SaveChanges();
					}
					_ignoreLeaveRow = false;
					_ignorePositionChange = false;
					_modified = false;
					_newRec = false;
					if (gridViewLookup.RowCount == 0) {
						ClearBindings();
					}
					SetBindings();
					ShowActionConfirmation("Record Deleted");
				}
				_currentVal = comboBoxEditMasterType.Text;
			}
			catch (Exception ex) {
				string message = ex.Message;
				if (message.Contains("inner exception")) {
					message = ex.InnerException.Message;
				}
				XtraMessageBox.Show(message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
				RefreshRecord();		//pull it back from db because that is its current state
				//We must also Load and rebind the related entities from the db because context.Refresh doesn't do that
				SetBindings();
			}
		}

        private void bindingNavigatorDeleteItem_Click(object sender, EventArgs e)
        {
			DeleteRecord();
        }

        private void TimedEvent(object sender, EventArgs e)
        {
            panelControlStatus.Visible = false;
            _actionConfirmation.Stop();
        }

        private void BindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
			if (SaveRecord(false))
				RefreshRecord();
		}

        private void bindingNavigatorMoveFirstItem_Click(object sender, EventArgs e)
        {
            if (SaveRecord(true))
                bindingSource.MoveFirst();
        }

        private void bindingNavigatorMovePreviousItem_Click(object sender, EventArgs e)
        {
            if (SaveRecord(true))
                bindingSource.MovePrevious();
        }

        private void bindingNavigatorMoveNextItem_Click(object sender, EventArgs e)
        {
            if (SaveRecord(true))
                bindingSource.MoveNext();
        }

        private void bindingNavigatorMoveLastItem_Click(object sender, EventArgs e)
        {
            if (SaveRecord(true))
                bindingSource.MoveLast();
        }

        private void bindingNavigatorPositionItem_Enter(object sender, EventArgs e)
        {
			//temp = newRec;
			//if (!temp && checkForms())
			//	context.Refresh(System.Data.Entity.Core.Objects.RefreshMode.StoreWins, (RelatedProduct)RouteBindingSource.Current);
            //setReadOnly(true);
        }

        private void RelatedProductsForm_FormClosing(object sender, FormClosingEventArgs e)
        {
			if (_modified || _newRec) {
				DialogResult select = DevExpress.XtraEditors.XtraMessageBox.Show("There are unsaved changes. Are you sure want to exit?", Name, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
				if (select == DialogResult.Yes) {
					e.Cancel = false;
					this.Dispose();
				}
				else if (select == DialogResult.No)
					e.Cancel = true;
			}
			else {
				e.Cancel = false;
				this.Dispose();
			}
        }

        private void enterControl(object sender, EventArgs e)
        {
			if (sender.GetType() == typeof(CheckEdit)) {
				_currentVal = ((CheckEdit)sender).Checked.ToString();
			}
			else {
				_currentVal = ((Control)sender).Text;
			}
        }

        private void RelatedProductsForm_KeyDown(object sender, KeyEventArgs e)
        {
    //        if (e.KeyCode == Keys.Enter && gridViewLookup.IsFilterRow(gridViewLookup.FocusedRowHandle))
    //        {
    //            ExecuteQuery();
				//e.Handled = true;
    //        }
        }

        private void ExecuteQuery()
        {
            this.Cursor = Cursors.WaitCursor;
            string colName = gridViewLookup.FocusedColumn.FieldName;
            string value = String.Empty;
			value = gridViewLookup.GetFocusedDisplayText();
			string query = "1=1";
			if (!string.IsNullOrEmpty(gridViewLookup.GetRowCellDisplayText(GridControl.AutoFilterRowHandle, "Product_Type"))) {
				query += String.Format(" and it.Product_Type like '%{0}%'", gridViewLookup.GetRowCellDisplayText(GridControl.AutoFilterRowHandle, "Product_Type"));
			}
			if (!string.IsNullOrEmpty(gridViewLookup.GetRowCellDisplayText(GridControl.AutoFilterRowHandle, "Product_Code"))) {
				query += String.Format(" and it.Product_Code like '%{0}%'", gridViewLookup.GetRowCellDisplayText(GridControl.AutoFilterRowHandle, "Product_Code"));
			}
			if (!string.IsNullOrEmpty(gridViewLookup.GetRowCellDisplayText(GridControl.AutoFilterRowHandle, "Type"))) {
				query += String.Format(" and it.Type like '%{0}%'", gridViewLookup.GetRowCellDisplayText(GridControl.AutoFilterRowHandle, "Type"));
			}
			if (!string.IsNullOrEmpty(gridViewLookup.GetRowCellDisplayText(GridControl.AutoFilterRowHandle, "Code"))) {
				query += String.Format(" and it.Code like '%{0}%'", gridViewLookup.GetRowCellDisplayText(GridControl.AutoFilterRowHandle, "Code"));
			}
            query += " order by Product_Type, Product_Code, Position";

            var records = _context.RelatedProduct.Where(query);
            if (records.Count() > 0)
            {
                bindingSource.DataSource = records;
                gridViewLookup.ClearColumnsFilter();
            }
            else
            {
				ClearBindings();
				DisplayHelper.DisplayInfo(this, "No matching records found.");
            }
            this.Cursor = Cursors.Default; 
        }

		void ClearBindings()
		{
			bindingSource.DataSource = typeof(RelatedProduct);
		}

		void SetBindings()
		{
			//If the route list is filtered, there will be rows in the binding source
			//that are not visible, and they can become selected if the last visible row
			//is deleted, so handle that by checking rowcount.
			if (bindingSource.Current == null) {
				_selectedRecord = null;
				enableNavigator(false);
				setReadOnly(true);
			}
			else {
				_selectedRecord = ((RelatedProduct)bindingSource.Current);
				enableNavigator(true);
				setReadOnly(false);
			}
		}

		private void RelatedProductsForm_Shown(object sender, EventArgs e)
		{
			gridViewLookup.FocusedRowHandle = DevExpress.Data.CurrencyDataController.FilterRow;
			gridControlLookup.Focus();
		}

		private void SetErrorInfo(Func<String> validationMethod, object sender)
		{
            bindingSource.EndEdit();		//force changes back into context for validation
            if (sender != null && sender != gridControlLookup) {
                if (sender.GetType() == typeof(CheckEdit)) {
                    if (_currentVal != ((CheckEdit)sender).Checked.ToString()) {
                        _modified = true;
                    }
                }
                else {
                    if (_currentVal != ((Control)sender).Text) {
                        _modified = true;
                    }
                }
                //Put this here to save the current value of the control into currentVal in the cases
                //where this event was fired without a new control gaining focus, ie when the Save
                //button is clicked. 
                enterControl(sender, new EventArgs());
            }
			if (validationMethod != null) {
				string error = validationMethod.Invoke();
				errorProvider1.SetError((Control)sender, error);
			}
		}

		private void dateEdits_Leave(object sender, EventArgs e)
		{
		}

		private void checkEditInactive_Leave(object sender, EventArgs e)
		{
			if (_selectedRecord != null)
				SetErrorInfo(null, sender);
		}

		private void gridViewProduct_BeforeLeaveRow(object sender, RowAllowEventArgs e)
		{
			//If the user selects a row, edits, then selects the auto-filter row, then selects a different row,
			//this event will fire for the auto-filter row, so we cannot ignore it because there is still a record
			//that may need to be saved. 
			if (!_ignoreLeaveRow && _selectedRecord != null && (_modified || _newRec)) {
				e.Allow = SaveRecord(true);
			}
		}

		private void GridViewProduct_ColumnFilterChanged(object sender, EventArgs e)
		{
			if (gridViewLookup.DataRowCount == 0) {
				ClearBindings();
			}
		}

		private void gridViewProduct_InvalidRowException(object sender, InvalidRowExceptionEventArgs e)
		{
			e.ExceptionMode = ExceptionMode.NoAction;
		}

		private void checkEditExcluded_Leave(object sender, EventArgs e)
		{
			if (_selectedRecord != null)
				SetErrorInfo(null, sender);
		}

		private void dateServices_Leave(object sender, EventArgs e)
		{
			if (_selectedRecord != null)
				SetErrorInfo(_selectedRecord.ValidateServiceDates, sender);
		}

		private void dateBooking_Leave(object sender, EventArgs e)
		{
			if (_selectedRecord != null)
				SetErrorInfo(_selectedRecord.ValidateBookingDates, sender);
		}

		private void comboBoxEditMasterType_Leave(object sender, EventArgs e)
		{
			if (_selectedRecord != null)
				SetErrorInfo(_selectedRecord.ValidateMasterType, sender);
		}

		private void SearchLookupEditMasterCode_Leave(object sender, EventArgs e)
		{
			if (_selectedRecord != null)
				SetErrorInfo(_selectedRecord.ValidateMasterCode, sender);
		}

		private void comboBoxEditRelatedType_Leave(object sender, EventArgs e)
		{
			if (_selectedRecord != null)
				SetErrorInfo(_selectedRecord.ValidateRelatedType, sender);
		}

		private void SearchLookupEditRelatedCode_Leave(object sender, EventArgs e)
		{
			if (_selectedRecord != null)
				SetErrorInfo(_selectedRecord.ValidateRelatedCode, sender);
		}

		private void comboBoxEditMasterType_TextChanged(object sender, EventArgs e)
		{
			string type = comboBoxEditMasterType.Text;
            LoadCodeLookupValues(type, bindingSourceCodeNameMaster);
        }

        private void comboBoxEditRelatedType_TextChanged(object sender, EventArgs e)
		{
			string type = comboBoxEditRelatedType.Text;
            LoadCodeLookupValues(type, bindingSourceCodeNameRelated);
		}

        private void LoadCodeLookupValues(string type, BindingSource source)
        {
            if (_productLookups.ContainsKey(type)) {
                source.DataSource = _productLookups[type];
            }
            else {
                source.DataSource = null;
            }
        }

        private void SearchLookupEdit_Popup(object sender, EventArgs e)
        {
            //Hide the Find button because it doesn't do anything when auto - filtering, except it
            //is useful to let the user know the purpose of the filter field, because it has no label
            //LayoutControl lc = ((sender as IPopupControl).PopupWindow.Controls[2].Controls[0] as LayoutControl);
            //((lc.Items[0] as LayoutControlGroup).Items[1] as LayoutControlGroup).Items[1].Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;

            PopupSearchLookUpEditForm popupForm = (sender as IPopupControl).PopupWindow as PopupSearchLookUpEditForm;
            popupForm.KeyPreview = true;
            popupForm.KeyUp -= PopupForm_KeyUp;
            popupForm.KeyUp += PopupForm_KeyUp;

            SearchLookUpEdit currentSearch = (SearchLookUpEdit)sender;
            popupForm.Size = new Size(currentSearch.Width, 800);
        }

        private void SearchLookupEdit_UpdateDisplayFilter(object sender, Custom_SearchLookupEdit.DisplayFilterEventArgs e)
        {
            //Users did not like have to type quotes in order to get an exact match of entered terms rather than any word being matched
            //https://www.devexpress.com/Support/Center/Example/Details/E3135/how-to-implement-an-event-allowing-you-to-customize-a-filter-string-produced-by-the-find
            //Also requires the custom inherited version of the SearchLookupEdit in the Custom_SearchLookupEdit namespace
            if (!string.IsNullOrEmpty(e.FilterText)) {
                e.FilterText = '"' + e.FilterText + '"';
            }
        }

        void PopupForm_KeyUp(object sender, KeyEventArgs e)
        {
            PopupSearchLookUpEditForm popupForm = sender as PopupSearchLookUpEditForm;
            if (e.KeyData == Keys.Enter) {
                if (!string.IsNullOrEmpty(popupForm.Properties.View.FindFilterText)) {
                    GridView view = popupForm.OwnerEdit.Properties.View;
                    view.FocusedRowHandle = 0;
                    popupForm.OwnerEdit.ClosePopup();
                }
            }
        }

        private void ButtonMoveUp_Click(object sender, EventArgs e)
        {
            if (_selectedRecord.Position == null || _selectedRecord.Position > 0) { 
                var prior = gridViewLookup.GetRow(gridViewLookup.FocusedRowHandle - 1);
                if (prior != null) {
                    RelatedProduct priorProduct = (RelatedProduct)prior;
                    if (priorProduct.Product_Code == _selectedRecord.Product_Code && priorProduct.Product_Type == _selectedRecord.Product_Type
                        && priorProduct.Position != null) {
                        priorProduct.Position += 1;
                    }
                    if (_selectedRecord.Position != null) {
                        _selectedRecord.Position -= 1;
                    }
                    //Bind();
                    _modified = true;
                }
            }
        }

        private void buttonMoveDown_Click(object sender, EventArgs e)
        {
            if (_selectedRecord.ID != 0) { 
                RelatedProduct nextProduct = (RelatedProduct)gridViewLookup.GetRow(gridViewLookup.FocusedRowHandle + 1);
                nextProduct.Position -= 1;
                _selectedRecord.Position += 1;
                //Bind();
                _modified = true;
            }
        }

        private void ProductBindingSource_CurrentChanged(object sender, EventArgs e)
		{
			//If the current record is changing as a result of removing a record to delete it, and it is the last
			//record in the table, then SetBindings will clear the bindings, which will cause the delete
			//to fail because the associated entities will become detached when their BindingSources are cleared.
			//Thus we have a flag which is set in that case to ignore this event.
			if (!_ignorePositionChange)
				SetBindings();
		}

    }
}
